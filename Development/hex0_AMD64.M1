# SPDX-FileCopyrightText: 2017 Jeremiah Orians <jeremiah@pdp10.guru>
# SPDX-FileCopyrightText: 2023 Andrius Å tikonas <andrius@stikonas.eu>
#
# SPDX-License-Identifier: GPL-3.0-or-later

DEFINE add_al, 04
DEFINE add_ebp,eax 01C5
DEFINE and_al, 24
DEFINE cdq 99
DEFINE cmp_al, 3C
DEFINE dec_ecx FFC9
DEFINE inc_edx FFC2
DEFINE jae 73
DEFINE jb 72
DEFINE je 74
DEFINE jl 7C
DEFINE jmp EB
DEFINE jne 75
DEFINE mov_al, B0
DEFINE mov_dx, 66BA
DEFINE mov_si, 66BE
DEFINE mov_al,[rsi] 8A06
DEFINE mov_edi,ebx 89DF
DEFINE mov_[rsi],ebp 892E
DEFINE neg_ebx F7DB
DEFINE pop_rax 58
DEFINE pop_rcx 59
DEFINE pop_rdi 5F
DEFINE pop_rdx 5A
DEFINE pop_rsi 5E
DEFINE push 6A
DEFINE push_rax 50
DEFINE push_rcx 51
DEFINE push_rdi 57
DEFINE push_rdx 52
DEFINE push_rsp 54
DEFINE shl_ebp, C1E5
DEFINE sub_al, 2C
DEFINE syscall 0F05
DEFINE test_eax,eax 85C0
DEFINE test_ecx,ecx 85C9
DEFINE xor_eax,eax 31C0
DEFINE xor_ebp,ebp 31ED
DEFINE xor_edi,edi 31FF
DEFINE xchg_ebx,eax 93
DEFINE xor_esi,esi 31F6

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function
:_start
	pop_rax                     # Get the number of arguments
	pop_rdi                     # Get the program name
	pop_rdi                     # Get the actual input name
	xor_esi,esi                 # prepare read_only, rsi = 0
	push !2                     # prepare syscall number
	pop_rax                     # the syscall number for open()
	cdq                         # Extra sure, rdx = 0
	syscall                     # Now open that damn file
	pop_rdi                     # Get the actual output name
	push_rax                    # Preserve the file pointer we were given
	mov_si, @577                # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	mov_dx, @448                # Prepare file as RWX for owner only (700 in octal)
	push !2                     # prepare syscall number
	pop_rax                     # the syscall number for open()
	syscall                     # Now open that damn file
	xchg_ebx,eax                # Preserve the file pointer we were given
	cdq                         # rdx = 0 since file descriptor is nonnegative
	inc_edx                     # rdx = 1 (count for read/write)

:loop_reset_all
	xor_ebp,ebp                 # ebp = 0 (no prior hex val)

# Comment tracking is done with ecx.
# ecx is decremented if we hit a
# comment (';' or '#') and reset
# if we hit a new-line.
:loop_reset_comment
	push_rdx
	pop_rcx                     # Set no current comment
:loop_add_comment
	dec_ecx
:loop

	# Read a byte
	pop_rdi                     # Get infile
	push_rsp
	pop_rsi                     # Set buffer
	# rdx is already set to 1.
	xor_eax,eax                 # Set read syscall in rax
	push_rcx                    # Save comment tracking
	syscall                     # Do the actual read
	pop_rcx                     # Restore comment tracking
	push_rdi                    # Re-save infile
	test_eax,eax                # Check what we got
	jne !cont                   # No EOF

	# Exit successfully
	mov_al, !60                 # Set exit syscall in rax
	xor_edi,edi                 # Set return success (rdi = 0)
	syscall                     # Exit

:cont
	mov_al,[rsi]                # Move prog byte in eax

	# New line check
	cmp_al, !10                 # Check new-line
	je !loop_reset_comment      # If new-line, end comment handling

	# In comment check
	test_ecx,ecx                # Skip byte if we are in a comment
	jne !loop

	# Start comment check
	cmp_al, !35                 # Start of '#' comment
	je !loop_add_comment

	cmp_al, !59                 # Start of ';' comment
	je !loop_add_comment

	# Start of hex str to int
	sub_al, !48                 # Subtract ascii '0' from al
	sub_al, !10                 # Check for value in '0'-'9'
	jb !write                   # We have hex value, write it

	sub_al, !7                  # Subtract ('A'-'0') from al
	and_al, !0xDF               # Remove lower case bit
	cmp_al, !7                  # Check for value 'A'-'F'
	jae !loop                   # We have hex value, write it

:write
	shl_ebp, !4                 # Shift up existing hex digit
	add_al, !10                 # Finish converting ascii to raw value
	add_ebp,eax                 # Combine the hex digits

	# Check if this is first digit in hex val
	neg_ebx                     # Flip sign of r10 to indicate we got a digit
	jl !loop                    # Negative -> first digit, get another one

	# We have both digits in low byte of ebp, good to write
	mov_[rsi],ebp               # Move edge to buffer
	mov_edi,ebx                 # Move outfile to rdi
	mov_al, !1                  # Set write syscall in rax
	syscall                     # Do the write
	jmp !loop_reset_all         # Start a fresh byte
:ELF_end
